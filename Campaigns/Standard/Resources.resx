<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Corvette_AtlantisX32Description" xml:space="preserve">
    <value>The Atlantis X23 is the smallest model of destroyer, and its combination of frigate-like size and corvette-like power makes it an excellent escort ship when defending larger ships against multiple smaller enemies. Because the Atlantis X23 is fitted with a jump drive, it can also serve as an intersystem patrol craft.</value>
  </data>
  <data name="Corvette_AtlantisX32Name" xml:space="preserve">
    <value>Atlantis X23</value>
  </data>
  <data name="Corvette_AtlantisX32PDescription" xml:space="preserve">
    <value>A refitted Atlantis X23 for more general tasks.The large shield system has been replaced with an advanced combat maneuvering systems and improved impulse engines.Its missile loadout is also more diverse.Mistaking the modified Atlantis for an Atlantis X23 would be a deadly mistake.</value>
  </data>
  <data name="Corvette_AtlantisX32PName" xml:space="preserve">
    <value>Atlantis X23 NX</value>
  </data>
  <data name="Corvette_DefensePlatformDescription" xml:space="preserve">
    <value>This stationary defense platform operates like a station, with docking and resupply functions, but is armed with powerful beam weapons and can slowly rotate. Larger systems often use these platforms to resupply patrol ships.</value>
  </data>
  <data name="Corvette_DefensePlatformName" xml:space="preserve">
    <value>Defense Platform</value>
  </data>
  <data name="Corvette_JumpCarrierDescription" xml:space="preserve">
    <value>The Jump Carrier is a specialized Freigher. It does not carry any cargo, as it's cargo bay is taken up by a specialized jump drive and the energy storage required to run this jump drive.
It is designed to carry other ships deep into space. So it has special docking parameters, allowing other ships to attach themselves to this ship.</value>
  </data>
  <data name="Corvette_JumpCarrierName" xml:space="preserve">
    <value>Jump Carrier</value>
  </data>
  <data name="Corvette_StarhammerDescription" xml:space="preserve">
    <value>Contrary to its predecessor, the Starhammer II lives up to its name. By resolving the original Starhammer's power and heat management issues, the updated model makes for a phenomenal frontal assault ship. Its low speed makes it difficult to position, but when in the right place at the right time, even the strongest shields can't withstand a Starhammer's assault for long.</value>
  </data>
  <data name="Corvette_StarhammerName" xml:space="preserve">
    <value>Starhammer II</value>
  </data>
  <data name="DefaultFreightHaulerDescription" xml:space="preserve">
    <value>A freighter that hauls large loads of cargo across long distances.</value>
  </data>
  <data name="Fighter_AdderMk4Description" xml:space="preserve">
    <value>The mark 4 Adder is a rare sight these days due to the success its successor, the mark 5 Adder, which often replaces this model.Its similar hull, however, means careless buyers are sometimes conned into buying mark 4 models disguised as the mark 5.</value>
  </data>
  <data name="Fighter_AdderMk4Name" xml:space="preserve">
    <value>Adder Mk. IV</value>
  </data>
  <data name="Fighter_AdderMk5Description" xml:space="preserve">
    <value>The Adder line's fifth iteration proved to be a great success among pirates and law officers alike. It is cheap, fast, and easy to maintain, and it packs a decent punch.</value>
  </data>
  <data name="Fighter_AdderMk5Name" xml:space="preserve">
    <value>Adder Mk. V</value>
  </data>
  <data name="Fighter_AdderMk6Description" xml:space="preserve">
    <value>The mark 6 Adder is a small upgrade compared to the highly successful mark 5 model.Since people still prefer the more familiar and reliable mark 5, the mark 6 has not seen the same level of success.</value>
  </data>
  <data name="Fighter_AdderMk6Name" xml:space="preserve">
    <value>Adder Mk. VI</value>
  </data>
  <data name="Fighter_HornetDescription" xml:space="preserve">
    <value>The MT52 Hornet is a basic interceptor found in many corners of the galaxy.It's easy to find spare parts for MT52s, not only because they are produced in large numbers, but also because they suffer high losses in combat.</value>
  </data>
  <data name="Fighter_HornetMk2Description" xml:space="preserve">
    <value>The MU52 Hornet is a new, upgraded version of the MT52. All of its systems are slightly improved over the MT52 model.</value>
  </data>
  <data name="Fighter_HornetMk2Name" xml:space="preserve">
    <value>MU52 Hornet Mk. II</value>
  </data>
  <data name="Fighter_HornetMk3Description" xml:space="preserve">
    <value>The MP52 Hornet is a significantly upgraded version of MU52 Hornet, with nearly twice the hull strength, nearly three times the shielding, better acceleration, impulse boosters, and a second laser cannon.</value>
  </data>
  <data name="Fighter_HornetMk3Name" xml:space="preserve">
    <value>MP52 Hornet Mk. III</value>
  </data>
  <data name="Fighter_HornetName" xml:space="preserve">
    <value>MT52 Hornet</value>
  </data>
  <data name="Fighter_LindwormDescription" xml:space="preserve">
    <value>The WX - Lindworm, or "Worm" as it's often called, is a bomber-class starfighter. While one of the least-shielded starfighters in active duty, the Worm's two launchers can pack quite a punch.Its goal is to fly in, destroy its target, and fly out or be destroyed.</value>
  </data>
  <data name="Fighter_LindwormName" xml:space="preserve">
    <value>WX-Lindworm</value>
  </data>
  <data name="FreighterBaseName" xml:space="preserve">
    <value>Freighter</value>
  </data>
  <data name="HaulFreighterDescriptions" xml:space="preserve">
    <value>;Cargo freighters haul large loads of cargo across long distances on impulse power. Their cargo bays include climate control and stabilization systems that keep the cargo in good condition;These freighters are specially designed to haul garbage and waste. They are fitted with a trash compactor and fewer stabilzation systems than cargo freighters.;Equipment freighters have specialized environmental and stabilization systems to safely carry delicate machinery and complex instruments.;Fuel freighters have massive tanks for hauling fuel, and delicate internal sensors that watch for any changes to their cargo's potentially volatile state.</value>
  </data>
  <data name="HaulTypes" xml:space="preserve">
    <value>Personnel;Goods;Garbage;Equipment;Fuel</value>
  </data>
  <data name="HugeStationDescription" xml:space="preserve">
    <value>The size of a sprawling town, stations at this scale represent a faction's center of space-borne power in a region. They serve many functions at once and represent an extensive investment of time, money, and labor. A huge station's shields and thick hull can keep it intact long enough for reinforcements to arrive, even when faced with an ongoing siege or massive, perfectly coordinated assault.</value>
  </data>
  <data name="HugeStationName" xml:space="preserve">
    <value>Huge Station</value>
  </data>
  <data name="JumpFreighterBaseName" xml:space="preserve">
    <value>Jump Freighter</value>
  </data>
  <data name="LargeStationDescription" xml:space="preserve">
    <value>These space-borne communities often represent permanent bases in a sector.Stations of this size can be military installations, commercial hubs, deep - space settlements, and small shipyards.Only a concentrated attack can penetrate a large station's shields, and its hull can withstand all but the most powerful weaponry.</value>
  </data>
  <data name="LargeStationName" xml:space="preserve">
    <value>Large Station</value>
  </data>
  <data name="MediumStationDescription" xml:space="preserve">
    <value>Large enough to accommodate small crews for extended periods of times, stations of this size are often trading posts, refueling bases, mining operations, and forward military bases.While their shields are strong, concerted attacks by many ships can bring them down quickly.</value>
  </data>
  <data name="MediumStationName" xml:space="preserve">
    <value>Medium Station</value>
  </data>
  <data name="SmallStationDescription" xml:space="preserve">
    <value>Stations of this size are often used as research outposts, listening stations, and security checkpoints.Crews turn over frequently in a small station's cramped accommodations, but they are small enough to look like ships on many long-range sensors, and organized raiders sometimes take advantage of this by placing small stations in nebulae to serve as raiding bases. They are lightly shielded and vulnerable to swarming assaults.</value>
  </data>
  <data name="SmallStationName" xml:space="preserve">
    <value>Small Station</value>
  </data>
</root>